<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form" xmlns:c="/lib/credentials" xmlns:cc="/lib/compuware">

	<f:entry title="Host connection" field="connectionId" help="/plugin/compuware-ispw-operations/help-connectionId.html">
    	<cc:hostSelect default="${descriptor.connectionId}"/>
	</f:entry>

	<f:entry title="Credentials" field="credentialsId" help="/plugin/compuware-ispw-operations/help-credentialsId.html">
		<c:select/>
	</f:entry>
    
    <f:entry field="ispwAction" title="Action" help="/plugin/compuware-ispw-operations/help-ispwAction.html">
        <f:select  id="action" default="${descriptor.ispwAction}"/>
    </f:entry>

    <f:entry field="ispwRequestBody" title="Request" help="/plugin/compuware-ispw-operations/help-ispwRequestBody.html">
        <f:textarea id="reqBody" default="${descriptor.ispwRequestBody}"/>
    </f:entry>

    <f:entry field="skipWaitingForSet" title="Skip waiting for the completion of the set if applicable?" help="/plugin/compuware-ispw-operations/help-skipWaitingForSet.html">
        <f:booleanRadio/>
    </f:entry>

    <f:entry field="consoleLogResponseBody" title="Response body in console?" help="/plugin/compuware-ispw-operations/help-consoleLogResponseBody.html">
        <f:booleanRadio/>
    </f:entry>
    
      <div id="dynamicFieldsDiv" />


       <!-- Hidden field to store the serialized dynamic fields -->
    <input type="hidden" id="serializedDynamicFields" name="serializedDynamicFields" />

     <!-- Div to show error messages -->
    <div id="error-message" style="color: red; display: none; font-weight: bold;">
        <span id="error-text"></span>
    </div>
    
       <script type="text/javascript">
  var dynamicFields = { "inputs": {} };
function updateSerializedFields() {
    obj = {};
    document.querySelectorAll('[id^="dynamicField_"]').forEach(function (input) {
        obj[input.name] = input.value;
    });
    dynamicFields.inputs = obj;
    // Update the hidden field with the serialized dynamic fields
    document.getElementById('serializedDynamicFields').value = JSON.stringify(dynamicFields);
}


function loadGenParameters() {
    document.getElementById('error-message').style.display = 'none';
    document.getElementById('dynamicFieldsDiv').innerHTML = '';
    const actionVal = document.getElementById('action');
    let selectedAction = actionVal.value;
	if('GenerateWithParm'==selectedAction){
    const resultContainer = document.getElementById('resultContainer'); // The container to update
    const connectionIdElements = document.getElementsByName('_.connectionId');
    const credentialIdElements = document.getElementsByName('_.credentialsId');
   
    const req_body = document.getElementById('reqBody');
    const actionVal = document.getElementById('action');
    const param1 = req_body.value;
    let index1 = connectionIdElements[0].selectedIndex;
    let option1 = connectionIdElements[0].options[index1];
    const param2 = option1!=undefined? option1.value:null;

    let index2 = credentialIdElements[1].selectedIndex;
    let option2 = credentialIdElements[1].options[index2];
    const param3 = option2 !=undefined ? option2.value:null;

    const rootUrl = "${rootURL}";
    const url = rootUrl + '/loadGenParm/getForm?'
        + 'param1=' + encodeURIComponent(param1)
        + '&amp;param2=' + encodeURIComponent(param2)
        + '&amp;param3=' + encodeURIComponent(param3);
    // Using Fetch API for AJAX request
    fetch(url)
        .then(response => {
          if (!response.ok) {
        // If the response status is not OK, handle the error
        return response.json().then(errorData => {
            throw new Error(errorData.message);
        });
    }
    return response.json();
        })
        .then(data => {
        	if(data.status==="error"){
               throw new Error(data.message);
        	}else{	
            console.log(data); // should output 'string'
            dynamicFields["taskId"] = data.taskId;
            dynamicFields["containerType"] = data.containerType;
            dynamicFields["containerId"] = data.containerId;
            dynamicFields["setId"] = data.setId;
            var dynamicFieldsDiv = document.getElementById('dynamicFieldsDiv');
            // Generate and append fields dynamically
            data["dataArr"].forEach(item => {
                var label = document.createElement("label");
                label.setAttribute("for", "dynamicField_" + item.id);
                label.setAttribute("style","font-family: Arial, sans-serif; font-size: 14px; font-weight: bold; color: rgba(0, 0, 0, 0.7);")
                label.innerText =item.name;
                // Create input field
                var input = document.createElement("input");
                input.setAttribute("type", "text");
                input.setAttribute("name", "dynamicField_" + item.target);
                input.setAttribute("id", "dynamicField_" + item.id);   // Correct 'id'
                input.setAttribute("value",item.value);
                input.classList.add("setting-input");
                // Append label and input to the div
                dynamicFieldsDiv.appendChild(label);
                dynamicFieldsDiv.appendChild(input);
                input.addEventListener('input', updateSerializedFields);
                updateSerializedFields();
                document.getElementById('error-message').style.display = 'none';
           	  	     
            });
           } 
        }).catch(error => {
            console.error("Error: ",error);
                // Display the error message to the user
                const errorMessageDiv = document.getElementById('error-message');
                const errorTextSpan = document.getElementById('error-text');
                errorTextSpan.innerText =error; // Set the error message
                errorMessageDiv.style.display = 'block'; // Make the div visible
        });
}
}
    const req_body = document.getElementById('reqBody');
    const actionVal = document.getElementById('action');
    let selectedAction = actionVal.value;
    
    if (req_body) {
    req_body.addEventListener('change', () => loadGenParameters());
       // req_body.addEventListener('change', loadGenParameters, false)
    }
    if (actionVal) {
        actionVal.addEventListener('change', () => loadGenParameters());
    
        //actionVal.addEventListener('change', loadGenParameters, false)
    }

    




 


     </script>

 </j:jelly>
